{"version":3,"file":"static/js/349.f4722cab.chunk.js","mappings":"0NAGaA,EAAYC,EAAAA,GAAAA,IAAH,oTAiBTC,EAAgBD,EAAAA,GAAAA,GAAH,wGAObE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,wKAWTI,EAAYJ,EAAAA,GAAAA,GAAH,6E,mBC5BTK,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,SAACT,EAAD,WACE,SAACE,EAAD,UACGK,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,YAAvB,OACV,SAACR,EAAD,WACE,UAACF,EAAD,CAAWW,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA/C,WACE,gBACES,IAAKJ,EAAW,UATd,mCASc,OAAgBA,GAAgBK,EAChDC,IAAKP,EACLQ,MAAM,QAGPR,MARWD,EADN,OAgBnB,C,yJC3BYU,EAAQpB,EAAAA,GAAAA,GAAH,yFAKLD,EAAYC,EAAAA,GAAAA,IAAH,4R,mBCiBtB,EAtBa,WACX,OAA4CqB,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAoB,mCAAG,8GAEIC,EAAAA,EAAAA,MAFJ,OAEnBJ,EAFmB,OAGzBC,EAAkBD,GAHO,gDAKzBK,QAAQC,IAAR,MALyB,yDAAH,qDAQ1BH,GACD,GAAE,KAED,UAAC1B,EAAD,YACE,SAACqB,EAAD,8BACA,SAACf,EAAA,EAAD,CAAWC,OAAQgB,MAGxB,C,mMCxBDO,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,mCACTC,SAAU,SAGL,IAAML,EAAiB,mCAAG,oGACRG,EAAAA,EAAAA,IAAA,uBADQ,cACzBG,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,qDAKjBC,EAAW,mCAAG,WAAMC,GAAN,uFACFP,EAAAA,EAAAA,IAAA,8BAAiCO,IAD/B,cACnBJ,EADmB,yBAElBA,EAASC,KAAKC,SAFI,2CAAH,sDAKXG,EAAe,mCAAG,WAAMC,GAAN,uFACNT,EAAAA,EAAAA,IAAA,iBAAoBS,IADd,cACvBN,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfM,EAAY,mCAAG,WAAMD,GAAN,uFACHT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aADG,cACpBN,EADoB,yBAEnBA,EAASC,KAAKO,MAFK,2CAAH,sDAKZC,EAAe,mCAAG,WAAMH,GAAN,uFACNT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aADM,cACvBN,EADuB,yBAEtBA,EAASC,KAAKC,SAFQ,2CAAH,qD","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/API.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  padding-left: 15px;\n  padding-right: 15px;\n\n  @media screen and (min-width: 480px) {\n    width: 480px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n  @media screen and (min-width: 1200px) {\n    width: 1200px;\n  }\n`;\n\nexport const ListContainer = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px 11%;\n  margin-left: 0 auto;\n`;\n\nexport const LinkTitle = styled(Link)`\n  text-decoration: underline;\n  color: black;\n  font-weight: 500;\n  font-size: 20px;\n  color: black;\n  :hover {\n    color: #32badf;\n  }\n`;\n\nexport const MovieItem = styled.li`\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport {\n  ListContainer,\n  MovieItem,\n  LinkTitle,\n  Container,\n} from './MovieList.styled';\nimport PropTypes from 'prop-types';\nimport noImage from '../image/no-image.jpg';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n  const baseURL = 'https://image.tmdb.org/t/p/w300';\n\n  return (\n    <Container>\n      <ListContainer>\n        {movies.map(({ id, original_title, poster_path }) => (\n          <MovieItem key={id}>\n            <LinkTitle to={`/movies/${id}`} state={{ from: location }}>\n              <img\n                src={poster_path ? `${baseURL}${poster_path}` : noImage}\n                alt={original_title}\n                width=\"300\"\n              />\n\n              {original_title}\n            </LinkTitle>\n          </MovieItem>\n        ))}\n      </ListContainer>\n    </Container>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\n// export const Container = styled.section`\n//   padding: 16px 32px;\n// `;\n\nexport const Title = styled.h1`\n  font-size: 500;\n  font-size: 32px;\n  margin-bottom: 16px; ;\n`;\nexport const Container = styled.div`\n  width: 100%;\n  margin: 0 auto;\n  padding: 16px 32px;\n\n  @media screen and (min-width: 480px) {\n    width: 480px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n  @media screen and (min-width: 1200px) {\n    width: 1200px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { getTrandingMovies } from 'services/API';\n\nimport { Container, Title } from './Home.styled';\nimport { MovieList } from '../../components/MovieList/MovieList';\n\nconst Home = () => {\n  const [trandingMovies, setTrandingMovies] = useState([]);\n\n  useEffect(() => {\n    const renderTrandingMovies = async () => {\n      try {\n        const trandingMovies = await getTrandingMovies();\n        setTrandingMovies(trandingMovies);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    renderTrandingMovies();\n  }, []);\n  return (\n    <Container>\n      <Title>Trending today</Title>\n      <MovieList movies={trandingMovies} />\n    </Container>\n  );\n};\n//\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '7f9da092915547cc78cd8c8696294985',\n  language: 'en-US',\n};\n\nexport const getTrandingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day`);\n  return response.data.results;\n};\n\nexport const searchMovie = async query => {\n  const response = await axios.get(`/search/movie?query=${query}`);\n  return response.data.results;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(`/movie/${movieId}`);\n  return response.data;\n};\n\nexport const getMovieCast = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/credits`);\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`);\n  return response.data.results;\n};\n"],"names":["Container","styled","ListContainer","LinkTitle","Link","MovieItem","MovieList","movies","location","useLocation","map","id","original_title","poster_path","to","state","from","src","noImage","alt","width","Title","useState","trandingMovies","setTrandingMovies","useEffect","renderTrandingMovies","getTrandingMovies","console","log","axios","api_key","language","response","data","results","searchMovie","query","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}